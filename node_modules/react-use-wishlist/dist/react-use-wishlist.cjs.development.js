'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function useLocalStorage(key, initialValue) {
  var _React$useState = React.useState(function () {
    try {
      var item = typeof window !== "undefined" && window.localStorage.getItem(key);
      return item ? item : initialValue;
    } catch (error) {
      return initialValue;
    }
  }),
      storedValue = _React$useState[0],
      setStoredValue = _React$useState[1];

  var setValue = function setValue(value) {
    try {
      var valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, valueToStore);
    } catch (error) {
      console.log(error);
    }
  };

  return [storedValue, setValue];
}

var initialState = {
  items: [],
  isWishlistEmpty: true,
  totalWishlistItems: 0,
  wishlistTotal: 0,
  metadata: {}
};
var WishlistContext = /*#__PURE__*/React.createContext(initialState);
var createWishlistIdentifier = function createWishlistIdentifier(len) {
  if (len === void 0) {
    len = 12;
  }

  return [].concat(Array(len)).map(function () {
    return (~~(Math.random() * 36)).toString(36);
  }).join("");
};
var useWishlist = function useWishlist() {
  var context = React.useContext(WishlistContext);
  if (!context) throw new Error("Expected to be wrapped in a WishlistProvider");
  return context;
};

function reducer(state, action) {
  switch (action.type) {
    case "SET_ITEMS":
      return generateWishlistState(state, action.payload);

    case "ADD_ITEM":
      {
        var tempItems = state.items;
        tempItems.push(action.payload);
        var items = tempItems;
        return generateWishlistState(state, items);
      }

    case "REMOVE_ITEM":
      {
        var _items = state.items.filter(function (i) {
          return i.id !== action.id;
        });

        return generateWishlistState(state, _items);
      }

    case "EMPTY_WISHLIST":
      return initialState;

    case "CLEAR_WISHLIST_META":
      return _extends({}, state, {
        metadata: {}
      });

    case "SET_WISHLIST_META":
      return _extends({}, state, {
        metadata: _extends({}, action.payload)
      });

    case "UPDATE_WISHLIST_META":
      return _extends({}, state, {
        metadata: _extends({}, state.metadata, action.payload)
      });

    default:
      throw new Error("No action specified");
  }
}

var generateWishlistState = function generateWishlistState(state, items) {
  if (state === void 0) {
    state = initialState;
  }

  var totalWishlistItems = items.length;
  var isWishlistEmpty = totalWishlistItems === 0;
  return _extends({}, initialState, state, {
    items: calculateItemTotals(items),
    totalWishlistItems: totalWishlistItems,
    wishlistTotal: calculateTotal(items),
    isWishlistEmpty: isWishlistEmpty
  });
};

var calculateItemTotals = function calculateItemTotals(items) {
  return items.map(function (item) {
    return _extends({}, item, {
      itemTotal: item.price
    });
  });
};

var calculateTotal = function calculateTotal(items) {
  return items.reduce(function (total, item) {
    return total + item.price;
  }, 0);
};

var WishlistProvider = function WishlistProvider(_ref) {
  var children = _ref.children,
      wishlistId = _ref.id,
      _ref$defaultItems = _ref.defaultItems,
      defaultItems = _ref$defaultItems === void 0 ? [] : _ref$defaultItems,
      onSetItems = _ref.onSetItems,
      onItemAdd = _ref.onItemAdd,
      onItemRemove = _ref.onItemRemove,
      _ref$storage = _ref.storage,
      storage = _ref$storage === void 0 ? useLocalStorage : _ref$storage,
      metadata = _ref.metadata;
  var id = wishlistId ? wishlistId : createWishlistIdentifier();

  var _storage = storage(wishlistId ? "react-use-wishlist-" + id : "react-use-wishlist", JSON.stringify(_extends({
    id: id
  }, initialState, {
    items: defaultItems,
    metadata: metadata
  }))),
      savedWishlist = _storage[0],
      saveWishlist = _storage[1];

  var _React$useReducer = React.useReducer(reducer, JSON.parse(savedWishlist)),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  React.useEffect(function () {
    saveWishlist(JSON.stringify(state));
  }, [state, saveWishlist]);

  var setWishlistItems = function setWishlistItems(items) {
    dispatch({
      type: "SET_ITEMS",
      payload: items.map(function (item) {
        return item;
      })
    });
    onSetItems && onSetItems(items);
  };

  var addWishlistItem = function addWishlistItem(item) {
    if (!item.id) throw new Error("You must provide an `id` for items");
    var currentItem = state.items.find(function (i) {
      return i.id === item.id;
    });
    if (currentItem) throw new Error("This item is already added to wishlist");
    if (!item.hasOwnProperty("price")) throw new Error("You must pass a `price` for new items");
    var payload = item;
    dispatch({
      type: "ADD_ITEM",
      payload: payload
    });
    onItemAdd && onItemAdd(payload);
    return;
  };

  var removeWishlistItem = function removeWishlistItem(id) {
    if (!id) return;
    dispatch({
      type: "REMOVE_ITEM",
      id: id
    });
    onItemRemove && onItemRemove(id);
  };

  var emptyWishlist = function emptyWishlist() {
    return dispatch({
      type: "EMPTY_WISHLIST"
    });
  };

  var getWishlistItem = function getWishlistItem(id) {
    return state.items.find(function (i) {
      return i.id === id;
    });
  };

  var inWishlist = function inWishlist(id) {
    return state.items.some(function (i) {
      return i.id === id;
    });
  };

  var clearWishlistMetadata = function clearWishlistMetadata() {
    dispatch({
      type: "CLEAR_WISHLIST_META"
    });
  };

  var setWishlistMetadata = function setWishlistMetadata(metadata) {
    if (!metadata) return;
    dispatch({
      type: "SET_WISHLIST_META",
      payload: metadata
    });
  };

  var updateWishlistMetadata = function updateWishlistMetadata(metadata) {
    if (!metadata) return;
    dispatch({
      type: "UPDATE_WISHLIST_META",
      payload: metadata
    });
  };

  return React.createElement(WishlistContext.Provider, {
    value: _extends({}, state, {
      getWishlistItem: getWishlistItem,
      inWishlist: inWishlist,
      setWishlistItems: setWishlistItems,
      addWishlistItem: addWishlistItem,
      removeWishlistItem: removeWishlistItem,
      emptyWishlist: emptyWishlist,
      clearWishlistMetadata: clearWishlistMetadata,
      setWishlistMetadata: setWishlistMetadata,
      updateWishlistMetadata: updateWishlistMetadata
    })
  }, children);
};

exports.WishlistProvider = WishlistProvider;
exports.createWishlistIdentifier = createWishlistIdentifier;
exports.initialState = initialState;
exports.useWishlist = useWishlist;
//# sourceMappingURL=react-use-wishlist.cjs.development.js.map

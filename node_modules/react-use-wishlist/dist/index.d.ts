import * as React from "react";
export interface Item {
    id: string;
    price: number;
    itemTotal?: number;
    [key: string]: any;
}
interface InitialState {
    id: string;
    items: Item[];
    isWishlistEmpty: boolean;
    totalWishlistItems: number;
    wishlistTotal: number;
    metadata?: Metadata;
}
export interface Metadata {
    [key: string]: any;
}
interface WishlistProviderState extends InitialState {
    addWishlistItem: (item: Item) => void;
    removeWishlistItem: (id: Item["id"]) => void;
    setWishlistItems: (items: Item[]) => void;
    emptyWishlist: () => void;
    getWishlistItem: (id: Item["id"]) => any | undefined;
    inWishlist: (id: Item["id"]) => boolean;
    clearWishlistMetadata: () => void;
    setWishlistMetadata: (metadata: Metadata) => void;
    updateWishlistMetadata: (metadata: Metadata) => void;
}
export declare type Actions = {
    type: "SET_ITEMS";
    payload: Item[];
} | {
    type: "ADD_ITEM";
    payload: Item;
} | {
    type: "REMOVE_ITEM";
    id: Item["id"];
} | {
    type: "EMPTY_WISHLIST";
} | {
    type: "CLEAR_WISHLIST_META";
} | {
    type: "SET_WISHLIST_META";
    payload: Metadata;
} | {
    type: "UPDATE_WISHLIST_META";
    payload: Metadata;
};
export declare const initialState: any;
export declare const createWishlistIdentifier: (len?: number) => string;
export declare const useWishlist: () => WishlistProviderState;
export declare const WishlistProvider: React.FC<{
    children?: React.ReactNode;
    id?: string;
    defaultItems?: Item[];
    onSetItems?: (items: Item[]) => void;
    onItemAdd?: (payload: Item) => void;
    onItemRemove?: (id: Item["id"]) => void;
    storage?: (key: string, initialValue: string) => [string, (value: Function | string) => void];
    metadata?: Metadata;
}>;
export {};
